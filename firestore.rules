
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to keep rules readable
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }
    
    function isVendor() {
      return isAuthenticated() && getUserData(request.auth.uid).role == 'vendor';
    }


    // USERS Collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin(); 
      allow delete: if isAdmin(); // Only admins can delete users

      // Addresses subcollection
      match /addresses/{addressId} {
        allow read, create, update, delete: if isOwner(userId);
      }
      
      // Wishlist subcollection
      match /wishlist/{productId} {
         allow read, create, delete: if isOwner(userId);
      }
      
      // Ledger Entries: Only readable by owner/admin, never writable from client
      match /ledgerEntries/{entryId} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if false;
      }
    }
    
    // PRODUCTS Collection
    match /products/{productId} {
      allow read: if resource.data.status == 'active'; // Public can only read active products
      allow create: if isVendor() || isAdmin();
      allow update: if (isVendor() && request.auth.uid == resource.data.vendorId) || isAdmin();
      allow delete: if (isVendor() && request.auth.uid == resource.data.vendorId) || isAdmin();
    }
    
    // CATEGORIES Collection
    match /categories/{categoryId} {
      allow read: if true; // Publicly readable
      allow write: if isAdmin(); // Only admins can write
    }
    
    // REVIEWS Collection
    match /reviews/{reviewId} {
      allow read: if true; // Publicly readable
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      // Allow vendor or admin to update (for replies)
      allow update: if (isVendor() && request.auth.uid == resource.data.vendorId) || isAdmin(); 
      allow delete: if isAdmin();
    }
    
    // ORDERS Collection
    match /orders/{orderId} {
      allow read: if (isOwner(resource.data.userId)) || 
                   (isVendor() && request.auth.uid in resource.data.vendorIds) || 
                   isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if (isVendor() && request.auth.uid in resource.data.vendorIds) || isAdmin();
      allow delete: if false; // Orders should not be deleted from client
    }
    
    // CARTS Collection
    match /carts/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // CMS Collection
    match /cms/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // PROMOTIONS Collection
    match /promotions/{promoId} {
      // Validated server-side via API. Deny direct client access for security.
      allow read, write: if isAdmin();
    }
    
    // REFUNDS Collection
    match /refunds/{refundId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin();
      allow delete: if false;
    }
    
    // PAYOUTS Collection
    match /payouts/{payoutId} {
        allow read: if isOwner(resource.data.vendorId) || isAdmin();
        allow create: if isOwner(request.resource.data.vendorId) && isVendor();
        allow update: if isAdmin();
        allow delete: if false;
    }
    
    // VENDORSETTINGS Collection
    match /vendorSettings/{vendorId} {
       allow read, write: if isOwner(vendorId) && isVendor();
    }

    // MESSAGING Collection
    match /conversations/{conversationId} {
      allow read, update: if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid in request.resource.data.participants;

      match /messages/{messageId} {
        allow read: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if isOwner(request.resource.data.senderId);
        allow update, delete: if false;
      }
    }
  }
}
